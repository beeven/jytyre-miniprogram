"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
App({
    globalData: {
        useCloud: true
    },
    onLaunch: function () {
        if (!wx.cloud) {
            console.error('请使用 2.2.3 或以上的基础库以使用云能力');
        }
        else {
            wx.cloud.init({
                traceUser: true,
            });
        }
    },
    ensureLogin: function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.globalData.openid !== null && typeof (_this.globalData.openid) !== "undefined") {
                wx.checkSession({
                    success: function () {
                        resolve(_this.globalData.openid);
                    },
                    fail: function () {
                        doLogin().then(function (openid) { resolve(openid); }).catch(function (err) { reject(err); });
                    }
                });
            }
            else {
                doLogin().then(function (openid) { resolve(openid); }).catch(function (err) { reject(err); });
            }
        });
    },
    getUserInfo: function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            wx.getSetting({
                success: function (res) {
                    if (res.authSetting["scope.userInfo"]) {
                        updateUserInfo().then(function (info) {
                            resolve(info);
                        });
                    }
                    else {
                        _this.ensureLogin().then(function () {
                            return updateUserInfo()
                                .then(function (info) {
                                resolve(info);
                            });
                        });
                    }
                },
                fail: function (err) {
                    reject(err);
                }
            });
        });
    }
});
function doLogin() {
    var app = getApp();
    return new Promise(function (resolve, reject) {
        wx.login({
            success: function (res) {
                if (res.code) {
                    if (app.globalData.useCloud) {
                        getOpenIDCloud().then(function (openid) {
                            resolve(openid);
                        });
                    }
                    else {
                        getOpenIDServer(res.code).then(function (openid) {
                            resolve(openid);
                        });
                    }
                }
            },
            fail: function (err) {
                reject(err);
            }
        });
    });
}
function getOpenIDCloud() {
    return new Promise(function (resolve, reject) {
        var app = getApp();
        wx.cloud.callFunction({
            name: 'login',
            data: {},
            success: function (res) {
                var openid = res.result.openid;
                app.globalData.openid = openid;
                resolve(openid);
            },
            fail: function (err) {
                reject(err);
            }
        });
    });
}
function getOpenIDServer(code) {
    return new Promise(function (resolve, reject) {
        var app = getApp();
        wx.request({
            url: 'https:/xxxxx/xxxx',
            data: {
                code: code
            },
            success: function (res) {
                app.globalData.openid = res.data.openid;
                resolve(res.data);
            },
            fail: function (err) {
                reject(err);
            }
        });
    });
}
function updateUserInfo() {
    return new Promise(function (resolve, reject) {
        var app = getApp();
        wx.getUserInfo({
            success: function (res) {
                app.globalData.userInfo = res.userInfo;
                resolve(res.userInfo);
            },
            fail: function (err) {
                reject(err);
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,